from datetime import datetime, timedelta

import bot.exceptions.api_exceptions as api_exc
import bot.keyboards.menu_kb as kb
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from bot.database import users_data
from bot.filters import DateFilter
from bot.keyboards.menu_kb import week_dates_keyboard
from bot.keyboards.pagination_kb import create_pagination_keyboard
from bot.lexicon import LEXICON, LEXICON_COMMANDS
from bot.utils import make_api_request, make_schedule_request
from environs import Env

from config import load_config

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Router
router: Router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule: list = []
week_days: list = []

env = Env()
env.read_env()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@router.message(F.text == LEXICON_COMMANDS["schedule"])
async def schedule_menu(message: Message):
    global week_days

    request_url = f"{env("API_URL")}/users/{message.chat.id}"

    if not week_days:
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            user_data = await make_api_request(request_url)
        except api_exc.UserNotFoundAPIException:
            await message.answer(text="–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è", reply_markup=kb.LogInMenu)
            return
        except api_exc.APIException:
            await message.answer(text=LEXICON["error"])
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ date, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if isinstance(user_data["week_start_date"], str):
            start_date = datetime.strptime(user_data["week_start_date"], "%Y-%m-%d").date()
        else:
            start_date = user_data["week_start_date"]

        RUS_WEEKDAYS = {0: "–ü–Ω", 1: "–í—Ç", 2: "–°—Ä", 3: "–ß—Ç", 4: "–ü—Ç", 5: "–°–±", 6: "–í—Å"}
        week_days = [
            f"{RUS_WEEKDAYS[(start_date + timedelta(days=i)).weekday()]}. - {(start_date + timedelta(days=i)).strftime('%d.%m')}" 
            for i in range(7)
        ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    await message.answer(
        text=LEXICON["schedule"],
        reply_markup=kb.ScheduleMenu
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
@router.message(F.text == LEXICON_COMMANDS["day_schedule"])
async def day_schedule_menu(message: Message):
    global week_days

    msg = await message.answer(LEXICON["processing"])

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.bot.delete_message(
        chat_id=msg.chat.id,
        message_id=msg.message_id
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è
    await message.answer(
        text=LEXICON["day_schedule"],
        reply_markup=week_dates_keyboard(week_days)
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
@router.message(DateFilter())
async def send_day_schedule(message: Message):
    msg = await message.answer(LEXICON["processing"])

    status, data = await make_schedule_request(
        user_id=message.chat.id,
        method="GET",
        params={"day": week_days.index(message.text)}
    )

    if not status:
        await message.answer(**data)
        return

    text = f"üìå{message.text}:\n\n"
    for discipline, time, location in data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL, –æ—Ñ–æ—Ä–º–ª—è–µ–º –∏—Ö –∫–∞–∫ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        if "https://" in str(location) or "http://" in str(location):
            location = f"[{location}]({location})"
        text += f"`{time}`:\n*{discipline}*\n{location}\n\n"

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    await msg.edit_text(text=text, parse_mode="Markdown")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.message(F.text == LEXICON_COMMANDS["week_schedule"])
async def send_week_schedule(message: Message):
    global schedule
    global week_days

    await message.answer(LEXICON["processing"])

    for day in week_days:
        text = f"üìå{day}:\n\n"

        status, data = await make_schedule_request(
            user_id=message.chat.id,
            method="GET",
            params={"day": week_days.index(day)}
        )

        if not status:
            await message.answer(**data)
            return

        for discipline, time, location in data:
            # –ï—Å–ª–∏ –µ—Å—Ç—å URL, –æ—Ñ–æ—Ä–º–ª—è–µ–º –∏—Ö –∫–∞–∫ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            if "https://" in str(location) or "http://" in str(location):
                location = f"[{location}]({location})"
            text += f"`{time}`:\n*{discipline}*\n{location}\n\n"

        schedule.append(text)

    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    page = users_data[message.chat.id]["schedule_page"]

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page != len(week_days) - 1 and page != 0:
        await message.answer(
            text=schedule[page],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                "backward_schedule", week_days[page], "forward_schedule"
            )
        )
    elif page == 0:
        await message.answer(
            text=schedule[page],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                week_days[page], "forward_schedule"
            )
        )
    else:
        await message.answer(
            text=schedule[page],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                "backward_schedule", week_days[page]
            )
        )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ ">>" –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(F.data == "forward_schedule")
async def press_forward_schedule(callback: CallbackQuery):
    global schedule
    global week_days

    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    page = users_data[callback.from_user.id]["schedule_page"]

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page + 1 < len(week_days) - 1:
        await callback.message.edit_text(
            text=schedule[page + 1],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                "backward_schedule", week_days[page + 1], "forward_schedule"
            )
        )
    else:
        await callback.message.edit_text(
            text=schedule[page + 1],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                "backward_schedule", week_days[page + 1]
            )
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    users_data[callback.from_user.id]["schedule_page"] += 1

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "<<" –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(F.data == "backward_schedule")
async def press_backward_schedule(callback: CallbackQuery):
    global schedule
    global week_days

    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    page = users_data[callback.from_user.id]["schedule_page"]

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page - 1 > 0:
        await callback.message.edit_text(
            text=schedule[page - 1],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                "backward_schedule", week_days[page - 1], "forward_schedule"
            )
        )
    else:
        await callback.message.edit_text(
            text=schedule[page - 1],
            parse_mode="Markdown",
            reply_markup=create_pagination_keyboard(
                week_days[page - 1], "forward_schedule"
            )
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    users_data[callback.from_user.id]["schedule_page"] -= 1

    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(F.text == LEXICON_COMMANDS["update_schedule"])
async def update_student_rating(message: Message):
    msg = await message.answer(text=LEXICON["processing"])

    status, data = await make_schedule_request(message.chat.id, method="PUT")

    if not status:
        await message.answer(**data)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[message.chat.id] = {
        "schedule_page": 0,              # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        "rating_page": 0                 # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    }

    await msg.edit_text(text=LEXICON["successful_updating"])
